buses-own [
  ; Static, read-only variables. These values never change. You can read them, but you cannot change them.
  bus_id          ; The ID of a given agent (bus). Each agent has a unique ID.
  bus_type        ; The type of a given agent (bus). 1 means "small", 2 means "medium" and 3 means "large".
    
  ; Dynamic, read-only variables. These values may change over time. You can read them, but you cannot change them.
  inbox           ; List containing all the incoming messages (a given message is a list like this [tick sender message]).
  bus_passengers  ; List containing all the passengers that the agent (bus) is currently carrying (represented as a list like this [passenger_id bus_stop]).
  previous_stop   ; ID of the last bus stop that the agent (bus) visited (-1 means that the agent has not visited any bus stop yet).
  current_stop    ; ID of the bus stop where the agent (bus) currently is (-1 means that the agent is not at any bus stop).
  next_stop       ; ID of the bus stop the agent (bus) is traveling to (-1 means that the agent is not travelling to any bus stop).

  ; New local variables for students.
  ; You can create any new local variable you want. Just declare them here.
  

  ;bs_list   ; list of bus stops where the bus will go
  bs_counter   ; ID of where the bus currently is in its schedule
  next ; TODO might be unnecessary 
  number_of_buses
  inbox_length ; length of the inbox
  west ; bus stops in west
  south ; bus stops in south
  east ; bus stops in east
  north; bus stops in north
  central_point ; what is the central point where all buses start from and return to 
  region ; the region the bus is currently driving in

]
 
globals [graph]

to init-buses
  ; Initialize your agents here.

  ; This list contains the topology of the entire network of bus stops, which is known to all agents. You can use this, for instance, to calculate the shortest path between two bus stops.
  set graph [[22 15 14] [11 19 23 7] [8] [16 4 20 9] [3 5 10] [4 16 10 17] [8] [1 17 13] [2 6 9] [3 8 20] [4 5 17 13 21] [1 16 17] [20 15 22] [7 10 22 23] [0 23] [0 12 18] [3 5 11] [5 7 10 11] [15] [1 23] [3 9 12 21] [10 20 22] [0 12 13 21] [1 13 14 19]]
  set west [4 5 16 11 17 10 4 3] ; centraal, dam, everts, sloter, lely, suri, leidse, dam, centraal
  set south [4 10 13 7 1 19 23 14 0 22 21 3] ; centraal, dam leidse, suriname, haarlem, amstelveense, vu, zuid, rai, amstel, wibaut, weesp, waterloo, centraal]
  set east [20 21 22 0 15 18 15 12 20 3] ; centraal, waterl, weesp, wibaut, amstel, sciencep, uva, sciencep, muider, waterl, centraal
  set north [9 8 6 8 2 8 9 3] ; centraal, hendrik, hasselt, flora, hasselt, buiksloter, hasselt, hendrik, centr
  ;set bs_list [4 5 16 11 17 10 13 7 1 19 23 14 0 15 18 15 12 22 21 20 9 8 2 6 8 9 3]  ; List containing the schedule of the bus in bus_stop IDs (set bs_list n-values 24 [?] doesn't work since not all busstops are adjecent.)
  set bs_counter 0
  set inbox_length 0
  set central_point 3
  
  ; sends all buses that a new bus is added
  set number_of_buses bus_id - 24 + 1 ;add one because of himself (so the last statement isnot necessary anymore)
  ;let bus_list n-values number_of_buses [24 + ?]
  ;foreach bus_list [
  ;  send-message ? "bus_added"
  ;]
  ; increases the number of buses
  ;set number_of_buses number_of_buses + 1
               
end

to execute-actions
  ; Add decision making strategies for your agents here.
  ; You are allowed to use the global variable 'ticks'.
  
  ; add a bus
  if ticks = 10 [
    show "added one bus bc of 10 ticks" 
    add-bus 1
    ]
  
  show " leasingList"
  show leasing_list
  
  open-inbox
   
  if current_stop != -1 [
    ; perform actions at busstop
    at-busstop

    ; travels to next busstop
    travel-to next
    update-nr-of-buses
    show "number of buses: "
    show number_of_buses
  ]
end

to at-busstop
    ifelse current_stop = central_point[ 
      ;sets 'next' as the next stop in schedule TODO
      ;set next best-busstop
      drop-off-passengers-at-dam
      pick-up-passengers-at-dam
      send-info
      choose-direction
    ]
    
    ; if current stop is not the central point
    [
      drop-off-passengers
      pick-up-passengers
      send-info        
    ]
end

; drop off passengers. First check whether at the central point or not
to drop-off-passengers-at-dam
  
  foreach bus_passengers [
    
    let passenger_id item 0 ?
    let destination item 1 ?
    drop-off-passenger passenger_id
    
    ; set a new direction
  ]
end

; drop off passengers when not at central point
to drop-off-passengers
  
  foreach bus_passengers [
    
    let passenger_id item 0 ?
    let destination item 1 ?
    ; if the passenger arrived at its destination or if the current_stop is the central point
    if destination = current_stop[
      drop-off-passenger passenger_id
      ;print "dropped off passenger:"
      ;print ?
    ]
  ]
end
 
 
to pick-up-passengers-at-dam
  
  ; if at central point. (for now pick up any passengers without preference) TODO: pick up best combination of passengers
  let pas_list get-passengers-at-stop current_stop
  foreach pas_list [
    let passenger_id item 0 ?
    ; check if bus is full
    ifelse length bus_passengers != get-max-passengers bus_type[
      pick-up-passenger passenger_id
      ;print "picked up passenger:"
      ;print ?
    ]
    [
      print "Bus is full"
    ]
  ]
end

; picks up passengers at busstop not the central point
to pick-up-passengers
  let pas_list get-passengers-at-stop current_stop
  foreach pas_list [
    let passenger_id item 0 ?
    ; check if bus is full
    ifelse length bus_passengers != get-max-passengers bus_type[
      pick-up-passenger passenger_id
      ;print "picked up passenger:"
      ;print ?
    ]
    [
      print "Bus is full"
    ]
  ]
end

; chooses a new region
to choose-direction
  let direction random 4
  if direction = 0 [
    set region north
    ;set next item 0 north
  ]
  if direction = 1 [
    set region east
    ;set next item 0 east
  ]
  if direction = 2 [
    set region south
    ;set next item 0 south
  ]
  if direction = 3 [
    set region west
    ;set next item 0 west
  ]
end

to set-next-busstop

end


; sends information to all other buses
to send-info
   let bus_list n-values number_of_buses [24 + ?]
   foreach bus_list [
     if bus_id != ? [
       ; sends a string combining amount of passengers in bus and next stop
       let messagestart word length bus_passengers " "
       let message word messagestart next
       send-message ? message
     ]
   ]
end

; opens the inbox and reacts to different messages -> (Cindy): deze niet meer nodig nu volgens mij met die leasing list length?
to open-inbox
  ;show "inbox"
  ;show inbox
  ; check for a new message
  ;if length inbox > inbox_length [
    ;let last_message last inbox
    ; increase number of buses because of a newly added bus
    ;if last last_message = "bus_added" [
      ;set number_of_buses number_of_buses + 1
      ;set inbox_length inbox_length + 1
;    ]
;  ]
end

to-report get-max-passengers [ bs_type ]
  if bs_type = 1[
    report 12
  ]
  if bs_type = 2[
    report 60
  ]
  if bs_type = 3[
    report 150
  ]
end

; retrieve best next stop
to-report best-busstop
  let best_busstop 0
  let highest_reward -1000
  
  ; index in for loop
  let i 0
  let reward 0
  ; for each possible busstop calculate the rewardfunction
  foreach item current_stop graph[
    ; retrieve the busstop to be compared
    let compared_busstop item i item current_stop graph
    ; calculate the reward
    set reward reward-function(compared_busstop)
    if reward > highest_reward [
      set highest_reward reward
      set best_busstop compared_busstop
    ]
    set i i + 1
  ]
  report best_busstop
  
end

to-report reward-function [ bus_stop ] 
  let reward 0
  
  ; calculate different features
  let dist get-distance current_stop bus_stop
  let no_of_people_waiting length get-passengers-at-stop bus_stop
  let no_of_people_destination get-no-destinations bus_stop
  
  ; calculate reward
  set reward (- dist + no_of_people_waiting + no_of_people_destination)
  
  ;show "busstop"
  ;show bus_stop
  ;show "reward"
  ;show reward
   
  report reward
end

to-report get-no-destinations [ bus_stop ]
  let counter 0
  foreach bus_passengers [
    if item 1 ? = bus_stop[
      set counter counter + 1
    ]
  ]  
  ;show "counter"
  ;show bus_stop
  ;show counter
  report counter
end  

to update-nr-of-buses 
  set number_of_buses number_of_buses + length leasing_list
end

  































  